{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","value","gifs","offset","modal","loading","loadGifs","bind","infiniteScroll","handleChange","handleSubmit","handleModal","callback","window","onscroll","d","document","documentElement","scrollTop","innerHeight","offsetHeight","this","query","setState","fetch","then","results","json","concat","data","event","target","preventDefault","url","modalImg","id","onSubmit","type","onChange","placeholder","className","length","map","gif","index","onClick","images","downsized_large","key","src","preview_gif","alt","clasName","style","display","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.953ab039.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst API_KEY = 'zDREFcgqhkNLtjVOjp3yIMjo354TceHK'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      value: '',\n      gifs: [],\n      offset: 0,\n      modal: false,\n      loading: false\n    };\n\n    this.loadGifs = this.loadGifs.bind(this)\n    this.infiniteScroll = this.infiniteScroll.bind(this)\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleModal = this.handleModal.bind(this)\n  }\n\n  infiniteScroll(callback) {\n    window.onscroll = () => {\n      let d = document.documentElement;\n      let offset = d.scrollTop + window.innerHeight;\n      let height = d.offsetHeight;\n\n      if (offset >= height - 200) {\n        callback()\n      } \n    }\n  }\n\n  loadGifs() {\n    let offset = this.state.offset\n    let query = this.state.value\n    this.setState({loading: true})\n    fetch(`http://api.giphy.com/v1/gifs/${query ? `search?q=${query}&` : `trending?`}api_key=${API_KEY}&limit=20&offset=${offset}`)\n    .then(results => results.json())\n    .then(results => this.setState({gifs: this.state.gifs.concat(results.data) || [], offset: offset + 20, loading: false}))\n  }\n\n  componentDidMount() {\n    this.loadGifs()\n    this.infiniteScroll(this.loadGifs) \n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.setState({offset: 0, gifs: []})\n    this.loadGifs()\n  } \n\n  handleModal(url) {\n    this.setState({\n      modal: !this.state.modal,\n      modalImg: url\n    })\n  }\n\n  render() {\n    return (\n      <div id=\"app\">\n        <form onSubmit={this.handleSubmit}>\n        <h2>giphy api</h2>\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} placeholder=\"Search for Gifs Here...\" />\n          <input id=\"btn\" type=\"submit\" value=\"Submit\" />\n        </form>\n        <div className=\"App\">\n          <div className=\"gif-container\">\n            <div className=\"message\">\n              {this.state.loading && <p>Loading Gifs...</p>}\n              {!this.state.gifs.length && !this.state.loading && <p>No Results</p>}\n            </div>\n            {this.state.gifs.map((gif, index) => {\n              return (\n                  <img onClick={() => {\n                    this.handleModal(this.state.gifs[index].images.downsized_large.url)\n                  }} className=\"gif\" key={index} src={this.state.gifs[index].images.preview_gif.url ? this.state.gifs[index].images.preview_gif.url : ''} alt=\"gif\" />\n                )\n            })}\n          </div>\n          <div clasName=\"modal\" style={{display: this.state.modal ? 'inline-block' : 'none'}}>\n            <div onClick={this.handleModal} className=\"overlay\"></div>\n            <img onClick={this.handleModal} className=\"modalImg\" src={this.state.modalImg} alt=\"modalImg\" />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}